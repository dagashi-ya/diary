=====================
Amazon ECSの仕様調査
=====================
目的
=======
| 本ページでは、以下のページを参考にAmazon ECSの概要や特徴をまとめ、実際にコンソール画面でECSを構築することをゴールとする。  
| `Amazon ECS の特徴 <https://aws.amazon.com/jp/ecs/features/?pg=ln&sec=gs>`_
| 余力があれば、TerraformでECSを構築できるようにコードを書きたい。

概要
========
- Amazon Elastic Container Serviceの略
- マネージドなコンテナオーケストレーションサービス
- organizations がコンテナ化されたアプリケーションを簡単にデプロイ、管理、およびスケールするのに役立つ

  - AWS Organizationsとは、複数のAWSアカウントを一元管理できるAWSのサービス
- Amazon EC2 や AWS Fargate で実行できるほか、Amazon ECS Anywhere のオンプレミスインフラストラクチャでも実行できる

  - AWS FargateはサーバーやAmazon EC2インスタンスの クラスターを管理することなくコンテナを実行できる

主な特徴
================
1. AWS Fargate を用い、設計による統合とサーバーレス
------------------------------------------------------
- | AWS Fargate は Amazon ECS に組み込まれているため、サーバーを管理したり、容量計画を扱う心配をしたり、安全性の面からコンテナワークロードを分離させる方法を検討する必要がなくなります。
  | →利用料金は上がるが、運用コストが減少する
- AWS Fargate がコンテナを柔軟なコンピューティングオプションで実行するために必要なスケーリングとインフラストラクチャ管理をすべて行う

2. ハイブリットデプロイ
------------------------
- Amazon ECS Anywhere により、使い慣れた Amazon ECS コンソールとオペレーターツールを使い、オンプレミスのコンテナワークロードを管理できる  

  - Amazon ECS Anywhereはユーザーが所有する任意のインフラ環境で、ECS のコントロールプレーンを利用して簡単にコンテナを実行することができる機能

3. 設計による安全性と分離
------------------------------------------------
- すでに信頼を置くセキュリティ、ID、管理、ガバナンスのツールがネイティブで統合されているため、すばやくかつ確実に本番環境に移行することができる
- コンテナそれぞれにきめ細かく許可を割り当てることができるため、アプリケーション構築時には高度な分離が可能

4. 自律型コントロールプレーンの運用
------------------------------------------------
- AWS の設定と運用上のベストプラクティスが組み込まれているため、コントロールプレーン、ノード、アドオンを管理する必要がない
- ネイティブで AWS とサードパーティーのツールのどちらも統合されている




参考
========
* `Amazon ECS の特徴 <https://aws.amazon.com/jp/ecs/features/?pg=ln&sec=gs>`_
* `AWS Fargateとは? <https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/userguide/what-is-fargate.html>`_
